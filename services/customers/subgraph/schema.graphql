# ----------------------------------
#             INTERFACES
# ----------------------------------
interface IEvent {
  id: ID!
  emitter: Account!
  timestamp: BigInt!
  transaction: Transaction!
}
# ----------------------------------
#  ENTITIES FOR HIGH-LEVEL CONCEPTS
# ----------------------------------
# Due to contract aptitude to change ownership entity is mutable
type Account @entity {
  id: Bytes!
  asCustomerManagerContract: CustomerManagerContract
  events: [IEvent!] @derivedFrom(field: "emitter")
}
type CustomerManagerContract @entity {
  id: Bytes!
  asAccount: Account!
  owner: Account
  customers: [Customer!]! @derivedFrom(field: "contract")
  customerAdditions: [CustomerAddition!]! @derivedFrom(field: "contract")
  customerUpdate: [CustomerUpdate!]! @derivedFrom(field: "contract")
}
type Customer @entity {
  id: ID!
  addition: CustomerAddition
  contract: CustomerManagerContract!
  derogatoryPublicRecs: BigInt
  dti: String
  inquiriesLast6Mths: BigInt
  fico: String
  logAnnualIncome: String
  update: CustomerUpdate
}
type Transaction @entity(immutable: true) {
  id: ID!
  blockNumber: BigInt!
  timestamp: BigInt!
  events: [IEvent!]! @derivedFrom(field: "transaction")
}
# ----------------------------------
#   ENTITIES FOR LOW-LEVEL OBJECTS
# ----------------------------------
type CustomerAddition implements IEvent @entity(immutable: true) {
  id: ID!
  contract: CustomerManagerContract!
  customer: Customer!
  emitter: Account!
  timestamp: BigInt!
  transaction: Transaction!
}
type CustomerUpdate implements IEvent @entity(immutable: true) {
  id: ID!
  contract: CustomerManagerContract!
  customer: Customer!
  emitter: Account!
  timestamp: BigInt!
  transaction: Transaction!
}
type OwnershipTransferred implements IEvent @entity(immutable: true) {
  id: ID!
  contract: CustomerManagerContract!
  emitter: Account!
  owner: Account!
  previousOwner: Account!
  timestamp: BigInt!
  transaction: Transaction!
}
